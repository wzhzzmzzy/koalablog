---
import type { Markdown } from '@/db/types'
import { isPresetSource, MarkdownSource } from '@/db'

interface Props {
  source: MarkdownSource
  markdown: Markdown
}

const { markdown, source } = Astro.props
const isPreset = isPresetSource(source)
---

<markdown-editor data-markdown={JSON.stringify(markdown)} data-source={source}>
  <div class="flex gap-x-3 w-full lg:flex-row">
    <form class="flex-1 flex flex-col" method="POST">
      <button id="save" class="w-12">Save</button>
      <input
        id="subject-input"
        type={isPreset ? 'hidden' : null}
        name="subject"
        class="mt-3 w-50"
        value={markdown.subject ?? ''}
        placeholder="Title"
      />
      <input
        id="link-input"
        type={isPreset ? 'hidden' : null}
        name="link"
        class="mt-3 w-50"
        value={markdown.link}
        placeholder="Link"
      />
      <input type="hidden" name="id" value={markdown.id} />
      <textarea class="min-h-[50vh] mt-3" name="content" />
    </form>
    <details class="flex-1" open>
      <summary>Preview</summary>
      <div id="preview-md" />
    </details>
  </div>
</markdown-editor>

<script>
import type { Markdown } from '@/db/types'
import { isPresetSource } from '@/db'
import { linkGenerator } from '@/db/markdown'
import consola from 'consola'
import { marked } from 'marked'

class MarkdownEditor extends HTMLElement {
  markdown: Markdown
  textareaEl: HTMLTextAreaElement
  subjectInputEl: HTMLInputElement
  linkInputEl: HTMLInputElement
  previewEl: HTMLDivElement
  formEl: HTMLFormElement

  userDefinedLink: boolean = false

  constructor() {
    super()

    // query elements & register event
    this.textareaEl = this.querySelector('textarea')!
    this.onInput = this.onInput.bind(this)
    this.textareaEl.addEventListener('input', this.onInput)

    this.subjectInputEl = this.querySelector('#subject-input')!
    this.onInputSubject = this.onInputSubject.bind(this)
    this.subjectInputEl.addEventListener('input', this.onInputSubject)

    this.linkInputEl = this.querySelector('#link-input')!
    this.onInputLink = this.onInputLink.bind(this)
    this.linkInputEl.addEventListener('input', this.onInputLink)

    this.previewEl = this.querySelector('#preview-md')!
    this.formEl = this.querySelector('form')!

    const { markdown } = this.dataset
    try {
      this.markdown = JSON.parse(markdown ?? '') as Markdown
    }
    catch (e) {
      consola.error(e)
      // let it crash
      throw e
    }

    this.textareaEl.value = this.markdown.content ?? ''
    this.refreshPreview()
  }

  async refreshPreview() {
    let previewMd = this.markdown.content ?? ''
    if (this.markdown.subject && !isPresetSource(Number(this.dataset.source))) {
      previewMd = `# ${this.markdown.subject}

${this.markdown.content ?? ''}`
    }
    this.previewEl.innerHTML = await marked(previewMd)
  }

  onInputSubject(e: Event) {
    this.markdown.subject = (e.target as HTMLTextAreaElement).value
    this.refreshPreview()

    if (!this.userDefinedLink) {
      this.markdown.link = linkGenerator(this.markdown.source, this.markdown.subject)
      this.linkInputEl.setAttribute('value', this.markdown.link)
    }
  }

  onInput(e: Event) {
    this.markdown.content = (e.target as HTMLTextAreaElement).value
    this.refreshPreview()
  }

  onInputLink(e: Event) {
    this.markdown.link = (e.target as HTMLInputElement).value
    this.userDefinedLink = true
  }
}

customElements.define('markdown-editor', MarkdownEditor)
</script>
