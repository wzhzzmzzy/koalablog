---
import type { Markdown } from '@/db/types'
import { isPresetSource, MarkdownSource } from '@/db'

interface Props {
  source: MarkdownSource
  markdown: Markdown
}

const { markdown, source } = Astro.props
const isPreset = isPresetSource(source)
---

<markdown-editor data-markdown={JSON.stringify(markdown)} data-source={source}>
  <div class="flex gap-x-3 w-full">
    <form class="flex-1 flex flex-col" method="POST">
      <button id="save" class="w-12">Save</button>
      <input id="subject-input" type={isPreset ? 'hidden' : null} name="subject" class="mt-3 w-50" value={markdown.subject ?? ''} placeholder="Title" />
      <input type="hidden" name="id" value={markdown.id} />
      <input type="hidden" name="link" value={markdown.link} />
      <textarea class="min-h-[50vh] mt-3" name="content" />
    </form>
    <details class="flex-1" open>
      <summary>Preview</summary>
      <div id="preview-md" />
    </details>
  </div>
</markdown-editor>

<script>
import type { Markdown } from '@/db/types'
import { isPresetSource } from '@/db'
import consola from 'consola'
import { marked } from 'marked'

class MarkdownEditor extends HTMLElement {
  markdown: Markdown
  textareaEl: HTMLTextAreaElement
  subjectInputEl: HTMLInputElement
  previewEl: HTMLDivElement
  formEl: HTMLFormElement

  constructor() {
    super()

    // query elements & register event
    this.textareaEl = this.querySelector('textarea')!
    this.onInput = this.onInput.bind(this)
    this.textareaEl.addEventListener('input', this.onInput)

    this.subjectInputEl = this.querySelector('#subject-input')!
    this.onInputSubject = this.onInputSubject.bind(this)
    this.subjectInputEl.addEventListener('input', this.onInputSubject)

    this.previewEl = this.querySelector('#preview-md')!
    this.formEl = this.querySelector('form')!

    const { markdown } = this.dataset
    try {
      this.markdown = JSON.parse(markdown ?? '') as Markdown
    }
    catch (e) {
      consola.error(e)
      // let it crash
      throw e
    }

    this.textareaEl.value = this.markdown.content ?? ''
    this.refreshPreview()
  }

  async refreshPreview() {
    let previewMd = this.markdown.content ?? ''
    if (this.markdown.subject && !isPresetSource(Number(this.dataset.source))) {
      previewMd = `# ${this.markdown.subject}

${this.markdown.content ?? ''}`
    }
    this.previewEl.innerHTML = await marked(previewMd)
  }

  onInputSubject(e: Event) {
    this.markdown.subject = (e.target as HTMLTextAreaElement).value
    this.refreshPreview()
  }

  onInput(e: Event) {
    this.markdown.content = (e.target as HTMLTextAreaElement).value
    this.refreshPreview()
  }

  // onSave(e: SubmitEvent) {
  //   e.preventDefault()
  //
  //   const pickKeys = ['id', 'link']
  //   Object.keys(this.markdown).forEach((key) => {
  //     if (pickKeys.includes(key)) {
  //       const hiddenInput = document.createElement('input')
  //       hiddenInput.type = 'hidden'
  //       hiddenInput.name = key
  //       hiddenInput.value = String(this.markdown[key as keyof Markdown])
  //       this.formEl.appendChild(hiddenInput)
  //     }
  //   })
  //
  //   this.formEl.submit()
  // }
}

customElements.define('markdown-editor', MarkdownEditor)
</script>
