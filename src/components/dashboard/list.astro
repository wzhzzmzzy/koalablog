---
import type { PostOrPage } from '@/db'
import { readList } from '@/db/markdown'
import { format, isSameYear } from 'date-fns'

interface Props {
  source: PostOrPage
  editable?: boolean
}

const { source, editable = false } = Astro.props

const env = Astro.locals.runtime.env

const list = await readList(env, source)
const formatUpdateAt = (updateAt: Date) => format(updateAt, isSameYear(updateAt, new Date()) ? 'MM-dd (HH:mm)' : 'yyyy-MM-dd')
---

<markdown-list data-source={source} data-editable={editable}>
  { editable && <button class="mt-5" id="add-btn">New</button> }
  {
    !list.length ? <div class="mt-3">Nothing here.</div> : null
  }
  <ul class="mt-3">
  {
    list.map(item => (
      <li class="flex gap-3">
        { item.updatedAt ? <span><i>{ formatUpdateAt(item.updatedAt) }</i></span> : null }
        <a class="text-black no-underline font-medium" href={item.link}><span>{ item.subject } </span></a>
      </li>
    ))
  }
  </ul>
</markdown-list>

<script>
import { MarkdownSource, type PostOrPage } from '@/db'

class MarkdownList extends HTMLElement {
  addBtnEl?: HTMLButtonElement
  source: PostOrPage

  constructor() {
    super()
    this.source = Number(this.dataset.source || '10') as PostOrPage

    if (this.dataset.editable === 'true') {
      this.createNew = this.createNew.bind(this)
      this.addBtnEl = this.querySelector('#add-btn')!
      this.addBtnEl.addEventListener('click', this.createNew)
    }
  }

  createNew() {
    const createSuffix = '?new'
    window.location.href = this.source === MarkdownSource.Post ? `/dashboard/post/${createSuffix}` : `/dashboard/page/${createSuffix}`
  }
}

customElements.define('markdown-list', MarkdownList)
</script>
