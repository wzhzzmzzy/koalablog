---
import type { Markdown } from '@/db/types'
import { MarkdownSource } from '@/db'
import { rawMd } from '@/lib/markdown'
import { formatDate } from 'date-fns'
import './index.css'

interface Props {
  article: Markdown
}

const { article } = Astro.props
const md = rawMd({ tex: true })
const content = article ? md.render(article.content ?? '') : ''
const source = article?.source
const langSet = Array.from(md.renderLangSet || []).join(',')
---

<article-client data-article={JSON.stringify(article)} data-lang-set={langSet}>
  {
    source === MarkdownSource.Post
  ? (
  <>
    <h1>{ article.subject }</h1>
    <p>{ formatDate(article.createdAt, 'yyyy-MM-dd') }</p>
  </>
  )
  : null
  }
  <article id="article" />
  <article id="serverArticle" set:html={content} />
</article-client>

<script>
class ArticleClient extends HTMLElement {
  articleEl: HTMLElement | null = null
  serverArticleEl: HTMLElement | null = null
  mdModulePromise: Promise<typeof import('@/lib/markdown')>

  constructor() {
    super()
    this.mdModulePromise = import('@/lib/markdown')
  }

  async connectedCallback() {
    this.articleEl = this.querySelector('#article')
    this.serverArticleEl = this.querySelector('#serverArticle')

    const article = JSON.parse(this.dataset.article || '')
    const langSet = this.dataset.langSet?.split(',') || []
    const mdModule = await this.mdModulePromise
    const content = article ? (await mdModule.md({ langSet })).render(article?.content ?? '') : ''
    this.serverArticleEl?.remove()
    this.articleEl?.insertAdjacentHTML('beforeend', content)

    const query = window.matchMedia('(prefers-color-scheme: dark)')
    query.addEventListener('change', this.rerenderMd.bind(this));
    (window as any).refreshCopyListener()
  }

  async rerenderMd() {
    window.location.reload()
  }
}

customElements.define('article-client', ArticleClient)
</script>
