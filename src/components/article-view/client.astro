---
import type { Markdown } from '@/db/types'
import { MarkdownSource } from '@/db'
import { addHeadingIds, extractHeadings } from '@/lib/utils/heading-id'
import { formatDate } from 'date-fns'
import Outline from './outline.svelte'

interface Props {
  article: Markdown
  content: string
  renderLangSet?: Set<string>
  showOutline?: boolean
}

const { article, content, renderLangSet } = Astro.props

const source = article?.source
const showOutline = Astro.props.showOutline || source === MarkdownSource.Post
const langSet = Array.from(renderLangSet || []).join(',')
const contentWithIds = await addHeadingIds(content)
const headings = showOutline ? await extractHeadings(contentWithIds) : []
---

<main class="article-main">
  <article-client data-article={JSON.stringify(article)} data-lang-set={langSet} data-show-outline={showOutline}>
    <div class="article-header">
      {
        source === MarkdownSource.Post
      ? (
      <>
        <h1 style="position: relative;">
          { article.subject }
          {showOutline && (
            <Outline client:load title={article.subject} headings={headings} />
          )}
        </h1>
        <p>{ formatDate(article.createdAt, 'yyyy-MM-dd') }</p>
      </>
      )
      : showOutline && (
        <div style="position: relative;">
          <h1>{ article.subject }</h1>
          <Outline client:load title={article.subject} headings={headings} />
        </div>
      )
      }
    </div>
    <article id="article" />
    <article id="serverArticle" set:html={contentWithIds} />
  </article-client>
</main>

<script>
import type { DoubleLinkPluginOptions } from '@/lib/markdown/double-link-plugin'
import { parseJson } from '@/lib/utils/parse-json'

class ArticleClient extends HTMLElement {
  articleEl: HTMLElement | null = null
  serverArticleEl: HTMLElement | null = null
  mdModulePromise: Promise<typeof import('@/lib/markdown')>

  constructor() {
    super()
    this.mdModulePromise = import('@/lib/markdown')
  }

  async connectedCallback() {
    this.articleEl = this.querySelector('#article')
    this.serverArticleEl = this.querySelector('#serverArticle')

    const article = JSON.parse(this.dataset.article || '')
    const langSet = this.dataset.langSet?.split(',') || []
    let outgoingLinks: DoubleLinkPluginOptions['allPostLinks'] | null = null
    outgoingLinks = parseJson(article.outgoing_links)

    const [mdModule, headingIdModule] = await Promise.all([
      this.mdModulePromise,
      import('@/lib/utils/heading-id'),
    ])

    const content = article ? (await mdModule.md({ langSet, allPostLinks: outgoingLinks || [] })).render(article?.content ?? '') : ''
    const contentWithIds = await headingIdModule.addHeadingIds(content)

    this.serverArticleEl?.remove()
    this.articleEl?.insertAdjacentHTML('beforeend', contentWithIds)
    window.requestIdleCallback(() => {
      window.refreshCopyListener()
      window.refreshTagListener()
    })
  }
}

customElements.define('article-client', ArticleClient)
</script>

