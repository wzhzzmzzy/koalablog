---
import type { Markdown } from '@/db/types'
import ArticleClient from '@/components/article-view/client.astro'
import ArticleView from '@/components/article-view/index.astro'
import { MarkdownSource } from '@/db'
import { read } from '@/db/markdown'
import Layout from '@/layouts/home.astro'
import { authInterceptor } from '@/lib/auth'
import { renderIt } from '@/lib/markdown/render-it'
import { retriveRss } from '@/lib/utils/rss'

const { slug } = Astro.params

console.log('all slug', slug)
if (slug === 'rss.xml') {
  console.log('all slug is rss', slug)
  return retriveRss(Astro)
}

const maybePage: Markdown | undefined = await read(Astro.locals.runtime?.env, MarkdownSource.Page, slug || '')

if (!maybePage) {
  return Astro.redirect(`/404?source=${encodeURIComponent(Astro.url.pathname)}`)
}
if (maybePage.private) {
  await authInterceptor(Astro, 'guest')
  if (!Astro.locals.session.authed) {
    return Astro.redirect(`/guest-login?id=${maybePage.id}`)
  }
}

const pageConfig = Astro.locals.config.pageConfig
const isBigArticle = (maybePage?.content || '').length > 1000
const { content, renderLangSet } = await renderIt(isBigArticle, maybePage, pageConfig.theme)
const firstParagraph = /<p>(.*?)<\/p>/.exec(content)
---

<Layout title={maybePage!.subject} desc={firstParagraph?.[1]}>
  {
    !isBigArticle
    ? <ArticleView article={maybePage} content={content} />
    : <ArticleClient article={maybePage} content={content} renderLangSet={renderLangSet} />
  }
</Layout>
