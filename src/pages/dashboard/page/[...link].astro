---
import Editor from '@/components/editor/index.svelte'
import { MarkdownSource, type PostOrPage } from '@/db'
import { initMarkdown, type Markdown } from '@/db/types'
import DashboardLayout from '@/layouts/dashboard.astro'
import { readArticle } from '@/lib/services/article'
import { actions } from 'astro:actions'

const { link } = Astro.params
const source: PostOrPage = MarkdownSource.Page
const url = Astro.url
const mode = url.searchParams.has('new') ? 'create' : 'update'

const removeResult = Astro.getActionResult(actions.form.remove)

// 如果删除成功，重定向到文章列表页面
if (removeResult && !removeResult.error) {
  const subpath = {
    [MarkdownSource.Page]: 'pages',
    [MarkdownSource.Post]: 'posts',
  }
  return Astro.redirect(`/dashboard/${subpath[source]}`)
}

const noAction = !removeResult
const actionError = removeResult?.error

const article: Response | Markdown = mode === 'update' && noAction
  ? await readArticle(Astro, source, link!)
  : initMarkdown()

if (article instanceof Response) {
  return article
}
---
<DashboardLayout title={`[Editor] ${article.subject}`}>
  { actionError && <p class="error">{actionError.message}</p> }

  <Editor client:load source={source} markdown={article} />
</DashboardLayout>
