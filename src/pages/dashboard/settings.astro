---
import ExportZip from '@/components/io/export-zip.svelte'
import ImportFile from '@/components/io/import-file.svelte'
import ThemeSwitch from '@/components/settings/theme-switch.svelte'
import DashboardLayout from '@/layouts/dashboard.astro'
import { globalConfig } from '@/lib/kv'
import { actions } from 'astro:actions'

const saveResult = Astro.getActionResult(actions.form.settings)

const saved = saveResult && !saveResult.error
// Refresh globalConfig after POST
if (saved) {
  const config = await globalConfig(Astro.locals.runtime?.env || {})
  Astro.locals.config = config
}

const pageConfig = Astro.locals.config.pageConfig
const title = pageConfig.title ?? ''
const lightTheme = pageConfig.theme?.light ?? 'latte'
const darkTheme = pageConfig.theme?.dark ?? 'mocha'

---
<DashboardLayout>
  <h1>Settings</h1>
  <setting-form>

    { saved && <p class="success">Saved Success</p> }
    { saveResult?.error && <p class="error">{saveResult.error.message}</p> }

    <form id="settings-form" method="POST" action={actions.form.settings} class="flex flex-col gap-3">
      <button class="w-12">Save</button>

      <label>
        Blog Title:<br />
      </label>
      <input class="w-60 sm:w-80" id="title-input" name="title" value={title} />

      <label>
      Theme:
      </label>
      <div id="theme-bus" class="hidden">
        <input id="light" type="hidden" name="lightTheme" value={lightTheme} />
        <input id="dark" type="hidden" name="darkTheme" value={darkTheme} />
      </div>
      <ThemeSwitch
        client:load
        light={lightTheme}
        dark={darkTheme}
      />

    </form>

    <h2>Utility</h2>

    <section class="flex gap-3 flex-col">
      <ImportFile client:load />
      <ExportZip client:load />
    </section>
  </setting-form>
</DashboardLayout>

<script>
import type { CatppuccinTheme } from '@/lib/const/config'

class SettingForm extends HTMLElement {
  formEl: HTMLFormElement
  titleInputEl: HTMLInputElement
  themeBusEl: HTMLDivElement
  lightInputEl: HTMLInputElement
  darkInputEl: HTMLInputElement

  theme: {
    light: CatppuccinTheme
    dark: CatppuccinTheme
  }

  constructor() {
    super()
    this.formEl = this.querySelector('#settings-form')!
    this.titleInputEl = this.querySelector('#title-input')!
    this.themeBusEl = this.querySelector('#theme-bus')!
    this.lightInputEl = this.querySelector('input#light')!
    this.darkInputEl = this.querySelector('input#dark')!

    this.onChangeTheme = this.onChangeTheme.bind(this)

    const light = this.lightInputEl.value as CatppuccinTheme
    const dark = this.darkInputEl.value as CatppuccinTheme
    this.theme = { light, dark }

    this.connectedCallback()
  }

  connectedCallback() {
    this.themeBusEl.addEventListener('update-theme', this.onChangeTheme)
  }

  disconnectedCallback() {
    this.themeBusEl.removeEventListener('update-theme', this.onChangeTheme)
  }

  onChangeTheme(event: CustomEvent<{ light: CatppuccinTheme, dark: CatppuccinTheme }>) {
    this.lightInputEl.value = event.detail.light
    this.darkInputEl.value = event.detail.dark
  }
}

customElements.define('setting-form', SettingForm)
</script>
