---
import { MarkdownSource } from '@/db'
import { readById } from '@/db/markdown'
import Layout from '@/layouts/layout.astro'

const pageId = Astro.url.searchParams.get('id')

const maybePage = await readById(Astro.locals.runtime?.env, MarkdownSource.Page, Number(pageId))

if (!maybePage) {
  return Astro.redirect(`/404?pageId=${pageId}`)
}
---
<Layout>
  <guest-login-form data-link={maybePage.link}>
    <form id="login-form" method="POST" class="max-w-md mx-auto mt-10">
      <div class="mb-6">
        <label for="passkey" class="block mb-2 text-sm font-medium">Passkey</label>
        <input
          type="password"
          id="passkey"
          name="passkey"
          class="!w-full box-border h-12"
          placeholder="Input passkey"
          required
        />
      </div>

      <button
        id="login-btn"
        type="submit"
        class="!w-full font-medium text-sm text-center"
      >
        Continue
      </button>
    </form>
  </guest-login-form>
</Layout>


<script>
import { actions } from 'astro:actions'

class GuestLoginForm extends HTMLElement {
  loginBtn: HTMLElement | null = null
  passkeyInput: HTMLInputElement | null = null
  formEl: HTMLFormElement | null = null
  errorEl: HTMLParagraphElement | null = null

  connectedCallback() {
    this.loginBtn = this.querySelector('#login-btn')
    this.passkeyInput = this.querySelector('#passkey')
    this.formEl = this.querySelector('#login-form')
    this.loginBtn?.addEventListener('click', (e) => {
      this.login(e)
    })
  }

  showErrorMessage(message: string = '') {
    if (!this.formEl) {
      return
    }

    if (!message) {
      this.errorEl?.remove()
    }

    if (!this.errorEl) {
      this.errorEl = document.createElement('p')
      this.errorEl.classList.add('error')
      this.errorEl.textContent = message
      this.formEl.insertAdjacentElement('beforeend', this.errorEl)
    }
    else {
      this.errorEl.textContent = message
    }
  }

  async login(e: Event) {
    e.preventDefault()

    const { error } = await actions.form.login({
      key: this.passkeyInput?.value || '',
      role: 'guest',
    })

    if (error) {
      if (error.code === 'UNAUTHORIZED') {
        this.showErrorMessage('Wrong Passkey')
      }
      else {
        this.showErrorMessage(error.message)
      }
      return
    }

    const redirectTo = this.dataset.link
    window.location.replace(`/${redirectTo || ''}`)
  }
}

customElements.define('guest-login-form', GuestLoginForm)
</script>
