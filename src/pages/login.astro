---
import Layout from '@/layouts/layout.astro'

const redirectTo = Astro.url.searchParams.get('from') || '/'
---
<Layout>
  <login-form data-redirect-to={redirectTo}>
    <form id="login-form" method="POST" class="max-w-md mx-auto mt-10">
      <div class="mb-6">
        <label for="adminKey" class="block mb-2 text-sm font-medium">Admin Key</label>
        <input
          type="password"
          id="admin-key"
          name="adminKey"
          class="!w-full box-border h-12"
          placeholder="Input admin key"
          required
        />
      </div>

      <button
        id="login-btn"
        type="submit"
        class="!w-full font-medium text-sm text-center"
      >
        Login, then redirect to {redirectTo}
      </button>
    </form>
  </login-form>
</Layout>


<script>
import { actions } from 'astro:actions'

class LoginForm extends HTMLElement {
  loginBtn: HTMLElement | null = null
  adminKeyInput: HTMLInputElement | null = null
  formEl: HTMLFormElement | null = null
  errorEl: HTMLParagraphElement | null = null

  connectedCallback() {
    this.loginBtn = this.querySelector('#login-btn')
    this.adminKeyInput = this.querySelector('#admin-key')
    this.formEl = this.querySelector('#login-form')
    this.loginBtn?.addEventListener('click', (e) => {
      this.login(e)
    })
  }

  showErrorMessage(message: string = '') {
    if (!this.formEl) {
      return
    }

    if (!message) {
      this.errorEl?.remove()
    }

    if (!this.errorEl) {
      this.errorEl = document.createElement('p')
      this.errorEl.classList.add('error')
      this.errorEl.textContent = message
      this.formEl.insertAdjacentElement('beforeend', this.errorEl)
    }
    else {
      this.errorEl.textContent = message
    }
  }

  async login(e: Event) {
    e.preventDefault()

    const { error } = await actions.form.login({
      adminKey: this.adminKeyInput?.value || '',
    })

    if (error) {
      if (error.code === 'UNAUTHORIZED') {
        this.showErrorMessage('Wrong Password')
      }
      else {
        this.showErrorMessage(error.message)
      }
      return
    }

    const searchParams = new URLSearchParams(window.location.search)
    const redirectTo = searchParams.get('from') || '/'
    window.location.pathname = redirectTo
  }
}

customElements.define('login-form', LoginForm)
</script>
